<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentCannotBeNullOrEmpty" xml:space="preserve">
    <value>Value cannot be null or an empty string.</value>
  </data>
  <data name="FeatureDependencyMissing" xml:space="preserve">
    <value>The '{0}' feature requires a '{1}' provided by the '{2}'.</value>
  </data>
  <data name="InvalidTagHelperLookupText" xml:space="preserve">
    <value>Invalid tag helper directive look up text '{0}'. The correct look up text format is: "name, assemblyName".</value>
  </data>
  <data name="InvalidTagHelperPrefixValue" xml:space="preserve">
    <value>Invalid tag helper directive '{0}' value. '{1}' is not allowed in prefix '{2}'.</value>
  </data>
  <data name="IntermediateNodeBuilder_PopInvalid" xml:space="preserve">
    <value>The '{0}' operation is not valid when the builder is empty.</value>
  </data>
  <data name="MismatchedContentEncoding" xml:space="preserve">
    <value>The specified encoding '{0}' does not match the content's encoding '{1}'.</value>
  </data>
  <data name="PhaseDependencyMissing" xml:space="preserve">
    <value>The '{0}' phase requires a '{1}' provided by the '{2}'.</value>
  </data>
  <data name="PhaseMustBeInitialized" xml:space="preserve">
    <value>The phase must be initialized by setting the '{0}' property.</value>
  </data>
  <data name="TagHelperAssemblyNameCannotBeEmptyOrNull" xml:space="preserve">
    <value>Tag helper directive assembly name cannot be null or empty.</value>
  </data>
  <data name="RazorProject_PathMustStartWithForwardSlash" xml:space="preserve">
    <value>Path must begin with a forward slash '/'.</value>
  </data>
  <data name="DirectiveDescriptor_InvalidNonOptionalToken" xml:space="preserve">
    <value>A non-optional directive token cannot follow an optional directive token.</value>
  </data>
  <data name="DocumentMissingTarget" xml:space="preserve">
    <value>The document of kind '{0}' does not have a '{1}'. The document classifier must set a value for '{2}'.</value>
  </data>
  <data name="RazorTemplateEngine_ItemCouldNotBeFound" xml:space="preserve">
    <value>The item '{0}' could not be found.</value>
  </data>
  <data name="TagHelper_InvalidBoundAttributeName" xml:space="preserve">
    <value>Invalid tag helper bound property '{1}' on tag helper '{0}'. Tag helpers cannot bind to HTML attributes with name '{2}' because the name contains a '{3}' character.</value>
  </data>
  <data name="TagHelper_InvalidBoundAttributeNameStartsWith" xml:space="preserve">
    <value>Invalid tag helper bound property '{1}' on tag helper '{0}'. Tag helpers cannot bind to HTML attributes with name '{2}' because the name starts with '{3}'.</value>
  </data>
  <data name="TagHelper_InvalidBoundAttributeNullOrWhitespace" xml:space="preserve">
    <value>Invalid tag helper bound property '{1}' on tag helper '{0}'. Tag helpers cannot bind to HTML attributes with a null or empty name.</value>
  </data>
  <data name="TagHelper_InvalidBoundAttributePrefix" xml:space="preserve">
    <value>Invalid tag helper bound property '{1}' on tag helper '{0}'. Tag helpers cannot bind to HTML attributes with prefix '{2}' because the prefix contains a '{3}' character.</value>
  </data>
  <data name="TagHelper_InvalidBoundAttributePrefixStartsWith" xml:space="preserve">
    <value>Invalid tag helper bound property '{1}' on tag helper '{0}'. Tag helpers cannot bind to HTML attributes with prefix '{2}' because the prefix starts with '{3}'.</value>
  </data>
  <data name="TagHelper_InvalidRestrictedChild" xml:space="preserve">
    <value>Invalid restricted child '{1}' for tag helper '{0}'. Tag helpers cannot restrict child elements that contain a '{2}' character.</value>
  </data>
  <data name="TagHelper_InvalidRestrictedChildNullOrWhitespace" xml:space="preserve">
    <value>Invalid restricted child for tag helper '{0}'. Name cannot be null or whitespace.</value>
  </data>
  <data name="TagHelper_InvalidTargetedAttributeName" xml:space="preserve">
    <value>Tag helpers cannot target attribute name '{0}' because it contains a '{1}' character.</value>
  </data>
  <data name="TagHelper_InvalidTargetedAttributeNameNullOrWhitespace" xml:space="preserve">
    <value>Targeted attribute name cannot be null or whitespace.</value>
  </data>
  <data name="TagHelper_InvalidTargetedParentTagName" xml:space="preserve">
    <value>Tag helpers cannot target parent tag name '{0}' because it contains a '{1}' character.</value>
  </data>
  <data name="TagHelper_InvalidTargetedParentTagNameNullOrWhitespace" xml:space="preserve">
    <value>Targeted parent tag name cannot be null or whitespace.</value>
  </data>
  <data name="TagHelper_InvalidTargetedTagName" xml:space="preserve">
    <value>Tag helpers cannot target tag name '{0}' because it contains a '{1}' character.</value>
  </data>
  <data name="TagHelper_InvalidTargetedTagNameNullOrWhitespace" xml:space="preserve">
    <value>Targeted tag name cannot be null or whitespace.</value>
  </data>
  <data name="InvalidOperation_SpanIsNotChangeOwner" xml:space="preserve">
    <value>The node '{0}' is not the owner of change '{1}'.</value>
  </data>
  <data name="DirectiveDescriptor_InvalidDirectiveKeyword" xml:space="preserve">
    <value>Invalid directive keyword '{0}'. Directives must have a non-empty keyword that consists only of letters.</value>
  </data>
  <data name="FeatureMustBeInitialized" xml:space="preserve">
    <value>The feature must be initialized by setting the '{0}' property.</value>
  </data>
  <data name="Diagnostic_CodeTarget_UnsupportedExtension" xml:space="preserve">
    <value>The document type '{0}' does not support the extension '{1}'.</value>
  </data>
  <data name="DirectiveMustAppearAtStartOfLine" xml:space="preserve">
    <value>The '{0}` directive must appear at the start of the line.</value>
  </data>
  <data name="DirectiveTokensMustBeSeparatedByWhitespace" xml:space="preserve">
    <value>The '{0}' directives value(s) must be separated by whitespace.</value>
  </data>
  <data name="KeyMustNotBeNull" xml:space="preserve">
    <value>The key must not be null.</value>
  </data>
  <data name="IntermediateNodeReference_NodeNotFound" xml:space="preserve">
    <value>The reference is invalid. The node '{0}' could not be found as a child of '{1}'.</value>
  </data>
  <data name="IntermediateNodeReference_NotInitialized" xml:space="preserve">
    <value>The reference is invalid. References initialized with the default constructor cannot modify nodes.</value>
  </data>
  <data name="IntermediateNodeReference_CollectionIsReadOnly" xml:space="preserve">
    <value>The node '{0}' has a read-only child collection and cannot be modified.</value>
  </data>
  <data name="DuplicateDirective" xml:space="preserve">
    <value>The '{0}' directive may only occur once per document.</value>
  </data>
  <data name="BlockDirectiveCannotBeImported" xml:space="preserve">
    <value>Block directive '{0}' cannot be imported.</value>
  </data>
  <data name="UnexpectedDirectiveKind" xml:space="preserve">
    <value>Unreachable code. This can happen when a new {0} is introduced.</value>
  </data>
  <data name="RenderingContextRequiresDelegate" xml:space="preserve">
    <value>The '{0}' requires a '{1}' delegate to be set.</value>
  </data>
  <data name="IntermediateNodes_InvalidParentNode" xml:space="preserve">
    <value>The '{0}' node type can only be used as a direct child of a '{1}' node.</value>
  </data>
  <data name="CodeWriter_InvalidNewLine" xml:space="preserve">
    <value>Invalid newline sequence '{0}'. Support newline sequences are '\r\n' and '\n'.</value>
  </data>
  <data name="AddTagHelperDirective_Description" xml:space="preserve">
    <value>Register Tag Helpers for use in the current document.</value>
  </data>
  <data name="FunctionsDirective_Description" xml:space="preserve">
    <value>Specify a C# code block.</value>
  </data>
  <data name="InheritsDirective_Description" xml:space="preserve">
    <value>Specify the base class for the current document.</value>
  </data>
  <data name="RemoveTagHelperDirective_Description" xml:space="preserve">
    <value>Remove Tag Helpers for use in the current document.</value>
  </data>
  <data name="SectionDirective_Description" xml:space="preserve">
    <value>Define a section to be rendered in the configured layout page.</value>
  </data>
  <data name="TagHelperPrefixDirective_Description" xml:space="preserve">
    <value>Specify a prefix that is required in an element name for it to be included in Tag Helper processing.</value>
  </data>
  <data name="AddTagHelperDirective_StringToken_Description" xml:space="preserve">
    <value>Add tag helpers from the specified type name and assembly name. Specify '*' for the type name to include all tag helper types from the specified assembly.</value>
  </data>
  <data name="AddTagHelperDirective_StringToken_Name" xml:space="preserve">
    <value>TypeName, AssemblyName</value>
  </data>
  <data name="InheritsDirective_TypeToken_Description" xml:space="preserve">
    <value>The base type that the current page inherits.</value>
  </data>
  <data name="InheritsDirective_TypeToken_Name" xml:space="preserve">
    <value>TypeName</value>
  </data>
  <data name="RemoveTagHelperDirective_StringToken_Description" xml:space="preserve">
    <value>Remove tag helpers from the specified type name and assembly name. Specify '*' for the type name to remove all tag helper types from the specified assembly.</value>
  </data>
  <data name="RemoveTagHelperDirective_StringToken_Name" xml:space="preserve">
    <value>TypeName, AssemblyName</value>
  </data>
  <data name="TagHelperPrefixDirective_PrefixToken_Description" xml:space="preserve">
    <value>The tag prefix to apply to tag helpers.</value>
  </data>
  <data name="TagHelperPrefixDirective_PrefixToken_Name" xml:space="preserve">
    <value>Prefix</value>
  </data>
  <data name="SectionDirective_NameToken_Description" xml:space="preserve">
    <value>The name of the section.</value>
  </data>
  <data name="SectionDirective_NameToken_Name" xml:space="preserve">
    <value>SectionName</value>
  </data>
</root>
// <auto-generated />

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;


namespace Microsoft.AspNetCore.Razor.Language.Syntax
{
  internal partial class SyntaxVisitor<TResult>
  {
    /// <summary>Called when the visitor visits a RazorCommentBlockSyntax node.</summary>
    public virtual TResult VisitRazorCommentBlock(RazorCommentBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlTextLiteralSyntax node.</summary>
    public virtual TResult VisitHtmlTextLiteral(HtmlTextLiteralSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpTransitionSyntax node.</summary>
    public virtual TResult VisitCSharpTransition(CSharpTransitionSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpMetaCodeSyntax node.</summary>
    public virtual TResult VisitCSharpMetaCode(CSharpMetaCodeSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpCodeLiteralSyntax node.</summary>
    public virtual TResult VisitCSharpCodeLiteral(CSharpCodeLiteralSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpCodeBlockSyntax node.</summary>
    public virtual TResult VisitCSharpCodeBlock(CSharpCodeBlockSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatement node.</summary>
    public virtual TResult VisitCSharpStatement(CSharpStatement node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatementBodySyntax node.</summary>
    public virtual TResult VisitCSharpStatementBody(CSharpStatementBodySyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpression node.</summary>
    public virtual TResult VisitCSharpExpression(CSharpExpression node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpressionBodySyntax node.</summary>
    public virtual TResult VisitCSharpExpressionBody(CSharpExpressionBodySyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpDirectiveSyntax node.</summary>
    public virtual TResult VisitCSharpDirective(CSharpDirectiveSyntax node)
    {
      return DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpDirectiveBodySyntax node.</summary>
    public virtual TResult VisitCSharpDirectiveBody(CSharpDirectiveBodySyntax node)
    {
      return DefaultVisit(node);
    }
  }

  internal partial class SyntaxVisitor
  {
    /// <summary>Called when the visitor visits a RazorCommentBlockSyntax node.</summary>
    public virtual void VisitRazorCommentBlock(RazorCommentBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a HtmlTextLiteralSyntax node.</summary>
    public virtual void VisitHtmlTextLiteral(HtmlTextLiteralSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpTransitionSyntax node.</summary>
    public virtual void VisitCSharpTransition(CSharpTransitionSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpMetaCodeSyntax node.</summary>
    public virtual void VisitCSharpMetaCode(CSharpMetaCodeSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpCodeLiteralSyntax node.</summary>
    public virtual void VisitCSharpCodeLiteral(CSharpCodeLiteralSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpCodeBlockSyntax node.</summary>
    public virtual void VisitCSharpCodeBlock(CSharpCodeBlockSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatement node.</summary>
    public virtual void VisitCSharpStatement(CSharpStatement node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpStatementBodySyntax node.</summary>
    public virtual void VisitCSharpStatementBody(CSharpStatementBodySyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpression node.</summary>
    public virtual void VisitCSharpExpression(CSharpExpression node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpExpressionBodySyntax node.</summary>
    public virtual void VisitCSharpExpressionBody(CSharpExpressionBodySyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpDirectiveSyntax node.</summary>
    public virtual void VisitCSharpDirective(CSharpDirectiveSyntax node)
    {
      DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CSharpDirectiveBodySyntax node.</summary>
    public virtual void VisitCSharpDirectiveBody(CSharpDirectiveBodySyntax node)
    {
      DefaultVisit(node);
    }
  }

  internal static partial class SyntaxFactory
  {
    /// <summary>Creates a new RazorCommentBlockSyntax instance.</summary>
    public static RazorCommentBlockSyntax RazorCommentBlock(SyntaxToken startCommentTransition, SyntaxToken startCommentStar, SyntaxToken comment, SyntaxToken endCommentStar, SyntaxToken endCommentTransition)
    {
      switch (startCommentTransition.Kind)
      {
        case SyntaxKind.RazorCommentTransition:
          break;
        default:
          throw new ArgumentException("startCommentTransition");
      }
      switch (startCommentStar.Kind)
      {
        case SyntaxKind.RazorCommentStar:
          break;
        default:
          throw new ArgumentException("startCommentStar");
      }
      switch (comment.Kind)
      {
        case SyntaxKind.RazorComment:
        case SyntaxKind.Unknown:
          break;
        default:
          throw new ArgumentException("comment");
      }
      switch (endCommentStar.Kind)
      {
        case SyntaxKind.RazorCommentStar:
          break;
        default:
          throw new ArgumentException("endCommentStar");
      }
      switch (endCommentTransition.Kind)
      {
        case SyntaxKind.RazorCommentTransition:
          break;
        default:
          throw new ArgumentException("endCommentTransition");
      }
      return (RazorCommentBlockSyntax)InternalSyntax.SyntaxFactory.RazorCommentBlock((Syntax.InternalSyntax.SyntaxToken)startCommentTransition.Green, (Syntax.InternalSyntax.SyntaxToken)startCommentStar.Green, (Syntax.InternalSyntax.SyntaxToken)comment.Green, (Syntax.InternalSyntax.SyntaxToken)endCommentStar.Green, (Syntax.InternalSyntax.SyntaxToken)endCommentTransition.Green).CreateRed();
    }

    /// <summary>Creates a new RazorCommentBlockSyntax instance.</summary>
    public static RazorCommentBlockSyntax RazorCommentBlock()
    {
      return SyntaxFactory.RazorCommentBlock(SyntaxFactory.Token(SyntaxKind.RazorCommentTransition), SyntaxFactory.Token(SyntaxKind.RazorCommentStar), default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.RazorCommentStar), SyntaxFactory.Token(SyntaxKind.RazorCommentTransition));
    }

    /// <summary>Creates a new HtmlTextLiteralSyntax instance.</summary>
    public static HtmlTextLiteralSyntax HtmlTextLiteral(SyntaxList<SyntaxToken> textTokens)
    {
      return (HtmlTextLiteralSyntax)InternalSyntax.SyntaxFactory.HtmlTextLiteral(textTokens.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new HtmlTextLiteralSyntax instance.</summary>
    public static HtmlTextLiteralSyntax HtmlTextLiteral()
    {
      return SyntaxFactory.HtmlTextLiteral(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new CSharpTransitionSyntax instance.</summary>
    public static CSharpTransitionSyntax CSharpTransition(SyntaxToken transition)
    {
      switch (transition.Kind)
      {
        case SyntaxKind.Transition:
          break;
        default:
          throw new ArgumentException("transition");
      }
      return (CSharpTransitionSyntax)InternalSyntax.SyntaxFactory.CSharpTransition((Syntax.InternalSyntax.SyntaxToken)transition.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpTransitionSyntax instance.</summary>
    public static CSharpTransitionSyntax CSharpTransition()
    {
      return SyntaxFactory.CSharpTransition(SyntaxFactory.Token(SyntaxKind.Transition));
    }

    /// <summary>Creates a new CSharpMetaCodeSyntax instance.</summary>
    public static CSharpMetaCodeSyntax CSharpMetaCode(SyntaxList<SyntaxToken> metaCode)
    {
      return (CSharpMetaCodeSyntax)InternalSyntax.SyntaxFactory.CSharpMetaCode(metaCode.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new CSharpMetaCodeSyntax instance.</summary>
    public static CSharpMetaCodeSyntax CSharpMetaCode()
    {
      return SyntaxFactory.CSharpMetaCode(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new CSharpCodeLiteralSyntax instance.</summary>
    public static CSharpCodeLiteralSyntax CSharpCodeLiteral(SyntaxList<SyntaxToken> cSharpTokens)
    {
      return (CSharpCodeLiteralSyntax)InternalSyntax.SyntaxFactory.CSharpCodeLiteral(cSharpTokens.Node.ToGreenList<InternalSyntax.SyntaxToken>()).CreateRed();
    }

    /// <summary>Creates a new CSharpCodeLiteralSyntax instance.</summary>
    public static CSharpCodeLiteralSyntax CSharpCodeLiteral()
    {
      return SyntaxFactory.CSharpCodeLiteral(default(SyntaxList<SyntaxToken>));
    }

    /// <summary>Creates a new CSharpCodeBlockSyntax instance.</summary>
    public static CSharpCodeBlockSyntax CSharpCodeBlock(SyntaxList<RazorSyntaxNode> children)
    {
      return (CSharpCodeBlockSyntax)InternalSyntax.SyntaxFactory.CSharpCodeBlock(children.Node.ToGreenList<InternalSyntax.RazorSyntaxNode>()).CreateRed();
    }

    /// <summary>Creates a new CSharpCodeBlockSyntax instance.</summary>
    public static CSharpCodeBlockSyntax CSharpCodeBlock()
    {
      return SyntaxFactory.CSharpCodeBlock(default(SyntaxList<RazorSyntaxNode>));
    }

    /// <summary>Creates a new CSharpStatement instance.</summary>
    public static CSharpStatement CSharpStatement(CSharpTransitionSyntax transition, CSharpSyntaxNode body)
    {
      if (transition == null)
        throw new ArgumentNullException(nameof(transition));
      if (body == null)
        throw new ArgumentNullException(nameof(body));
      return (CSharpStatement)InternalSyntax.SyntaxFactory.CSharpStatement(transition == null ? null : (InternalSyntax.CSharpTransitionSyntax)transition.Green, body == null ? null : (InternalSyntax.CSharpSyntaxNode)body.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpStatement instance.</summary>
    public static CSharpStatement CSharpStatement(CSharpSyntaxNode body)
    {
      return SyntaxFactory.CSharpStatement(SyntaxFactory.CSharpTransition(), body);
    }

    /// <summary>Creates a new CSharpStatementBodySyntax instance.</summary>
    public static CSharpStatementBodySyntax CSharpStatementBody(CSharpMetaCodeSyntax openBrace, CSharpCodeBlockSyntax cSharpCode, CSharpMetaCodeSyntax closeBrace)
    {
      if (openBrace == null)
        throw new ArgumentNullException(nameof(openBrace));
      if (cSharpCode == null)
        throw new ArgumentNullException(nameof(cSharpCode));
      if (closeBrace == null)
        throw new ArgumentNullException(nameof(closeBrace));
      return (CSharpStatementBodySyntax)InternalSyntax.SyntaxFactory.CSharpStatementBody(openBrace == null ? null : (InternalSyntax.CSharpMetaCodeSyntax)openBrace.Green, cSharpCode == null ? null : (InternalSyntax.CSharpCodeBlockSyntax)cSharpCode.Green, closeBrace == null ? null : (InternalSyntax.CSharpMetaCodeSyntax)closeBrace.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpStatementBodySyntax instance.</summary>
    public static CSharpStatementBodySyntax CSharpStatementBody()
    {
      return SyntaxFactory.CSharpStatementBody(SyntaxFactory.CSharpMetaCode(), SyntaxFactory.CSharpCodeBlock(), SyntaxFactory.CSharpMetaCode());
    }

    /// <summary>Creates a new CSharpExpression instance.</summary>
    public static CSharpExpression CSharpExpression(CSharpTransitionSyntax transition, CSharpSyntaxNode body)
    {
      if (transition == null)
        throw new ArgumentNullException(nameof(transition));
      if (body == null)
        throw new ArgumentNullException(nameof(body));
      return (CSharpExpression)InternalSyntax.SyntaxFactory.CSharpExpression(transition == null ? null : (InternalSyntax.CSharpTransitionSyntax)transition.Green, body == null ? null : (InternalSyntax.CSharpSyntaxNode)body.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpExpression instance.</summary>
    public static CSharpExpression CSharpExpression(CSharpSyntaxNode body)
    {
      return SyntaxFactory.CSharpExpression(SyntaxFactory.CSharpTransition(), body);
    }

    /// <summary>Creates a new CSharpExpressionBodySyntax instance.</summary>
    public static CSharpExpressionBodySyntax CSharpExpressionBody(CSharpMetaCodeSyntax openParen, CSharpCodeBlockSyntax cSharpCode, CSharpMetaCodeSyntax closeParen)
    {
      if (cSharpCode == null)
        throw new ArgumentNullException(nameof(cSharpCode));
      return (CSharpExpressionBodySyntax)InternalSyntax.SyntaxFactory.CSharpExpressionBody(openParen == null ? null : (InternalSyntax.CSharpMetaCodeSyntax)openParen.Green, cSharpCode == null ? null : (InternalSyntax.CSharpCodeBlockSyntax)cSharpCode.Green, closeParen == null ? null : (InternalSyntax.CSharpMetaCodeSyntax)closeParen.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpExpressionBodySyntax instance.</summary>
    public static CSharpExpressionBodySyntax CSharpExpressionBody()
    {
      return SyntaxFactory.CSharpExpressionBody(default(CSharpMetaCodeSyntax), SyntaxFactory.CSharpCodeBlock(), default(CSharpMetaCodeSyntax));
    }

    /// <summary>Creates a new CSharpDirectiveSyntax instance.</summary>
    public static CSharpDirectiveSyntax CSharpDirective(CSharpTransitionSyntax transition, CSharpSyntaxNode body)
    {
      if (transition == null)
        throw new ArgumentNullException(nameof(transition));
      if (body == null)
        throw new ArgumentNullException(nameof(body));
      return (CSharpDirectiveSyntax)InternalSyntax.SyntaxFactory.CSharpDirective(transition == null ? null : (InternalSyntax.CSharpTransitionSyntax)transition.Green, body == null ? null : (InternalSyntax.CSharpSyntaxNode)body.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpDirectiveSyntax instance.</summary>
    public static CSharpDirectiveSyntax CSharpDirective(CSharpSyntaxNode body)
    {
      return SyntaxFactory.CSharpDirective(SyntaxFactory.CSharpTransition(), body);
    }

    /// <summary>Creates a new CSharpDirectiveBodySyntax instance.</summary>
    public static CSharpDirectiveBodySyntax CSharpDirectiveBody(CSharpMetaCodeSyntax keyword, CSharpCodeBlockSyntax cSharpCode)
    {
      if (keyword == null)
        throw new ArgumentNullException(nameof(keyword));
      if (cSharpCode == null)
        throw new ArgumentNullException(nameof(cSharpCode));
      return (CSharpDirectiveBodySyntax)InternalSyntax.SyntaxFactory.CSharpDirectiveBody(keyword == null ? null : (InternalSyntax.CSharpMetaCodeSyntax)keyword.Green, cSharpCode == null ? null : (InternalSyntax.CSharpCodeBlockSyntax)cSharpCode.Green).CreateRed();
    }

    /// <summary>Creates a new CSharpDirectiveBodySyntax instance.</summary>
    public static CSharpDirectiveBodySyntax CSharpDirectiveBody()
    {
      return SyntaxFactory.CSharpDirectiveBody(SyntaxFactory.CSharpMetaCode(), SyntaxFactory.CSharpCodeBlock());
    }
  }
}

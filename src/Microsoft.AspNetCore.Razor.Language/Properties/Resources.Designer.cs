// <auto-generated />
namespace Microsoft.AspNetCore.Razor.Language
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Razor.Language.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// Value cannot be null or an empty string.
        /// </summary>
        internal static string ArgumentCannotBeNullOrEmpty
        {
            get => GetString("ArgumentCannotBeNullOrEmpty");
        }

        /// <summary>
        /// Value cannot be null or an empty string.
        /// </summary>
        internal static string FormatArgumentCannotBeNullOrEmpty()
            => GetString("ArgumentCannotBeNullOrEmpty");

        /// <summary>
        /// The '{0}' feature requires a '{1}' provided by the '{2}'.
        /// </summary>
        internal static string FeatureDependencyMissing
        {
            get => GetString("FeatureDependencyMissing");
        }

        /// <summary>
        /// The '{0}' feature requires a '{1}' provided by the '{2}'.
        /// </summary>
        internal static string FormatFeatureDependencyMissing(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("FeatureDependencyMissing"), p0, p1, p2);

        /// <summary>
        /// Invalid tag helper directive look up text '{0}'. The correct look up text format is: "typeName, assemblyName".
        /// </summary>
        internal static string InvalidTagHelperLookupText
        {
            get => GetString("InvalidTagHelperLookupText");
        }

        /// <summary>
        /// Invalid tag helper directive look up text '{0}'. The correct look up text format is: "typeName, assemblyName".
        /// </summary>
        internal static string FormatInvalidTagHelperLookupText(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidTagHelperLookupText"), p0);

        /// <summary>
        /// Invalid tag helper directive '{0}' value. '{1}' is not allowed in prefix '{2}'.
        /// </summary>
        internal static string InvalidTagHelperPrefixValue
        {
            get => GetString("InvalidTagHelperPrefixValue");
        }

        /// <summary>
        /// Invalid tag helper directive '{0}' value. '{1}' is not allowed in prefix '{2}'.
        /// </summary>
        internal static string FormatInvalidTagHelperPrefixValue(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidTagHelperPrefixValue"), p0, p1, p2);

        /// <summary>
        /// The '{0}' operation is not valid when the builder is empty.
        /// </summary>
        internal static string IRBuilder_PopInvalid
        {
            get => GetString("IRBuilder_PopInvalid");
        }

        /// <summary>
        /// The '{0}' operation is not valid when the builder is empty.
        /// </summary>
        internal static string FormatIRBuilder_PopInvalid(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("IRBuilder_PopInvalid"), p0);

        /// <summary>
        /// The specified encoding '{0}' does not match the content's encoding '{1}'.
        /// </summary>
        internal static string MismatchedContentEncoding
        {
            get => GetString("MismatchedContentEncoding");
        }

        /// <summary>
        /// The specified encoding '{0}' does not match the content's encoding '{1}'.
        /// </summary>
        internal static string FormatMismatchedContentEncoding(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("MismatchedContentEncoding"), p0, p1);

        /// <summary>
        /// The '{0}' phase requires a '{1}' provided by the '{2}'.
        /// </summary>
        internal static string PhaseDependencyMissing
        {
            get => GetString("PhaseDependencyMissing");
        }

        /// <summary>
        /// The '{0}' phase requires a '{1}' provided by the '{2}'.
        /// </summary>
        internal static string FormatPhaseDependencyMissing(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("PhaseDependencyMissing"), p0, p1, p2);

        /// <summary>
        /// The phase must be initialized by setting the '{0}' property.
        /// </summary>
        internal static string PhaseMustBeInitialized
        {
            get => GetString("PhaseMustBeInitialized");
        }

        /// <summary>
        /// The phase must be initialized by setting the '{0}' property.
        /// </summary>
        internal static string FormatPhaseMustBeInitialized(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("PhaseMustBeInitialized"), p0);

        /// <summary>
        /// Tag helper directive assembly name cannot be null or empty.
        /// </summary>
        internal static string TagHelperAssemblyNameCannotBeEmptyOrNull
        {
            get => GetString("TagHelperAssemblyNameCannotBeEmptyOrNull");
        }

        /// <summary>
        /// Tag helper directive assembly name cannot be null or empty.
        /// </summary>
        internal static string FormatTagHelperAssemblyNameCannotBeEmptyOrNull()
            => GetString("TagHelperAssemblyNameCannotBeEmptyOrNull");

        /// <summary>
        /// Path must begin with a forward slash '/'.
        /// </summary>
        internal static string RazorProject_PathMustStartWithForwardSlash
        {
            get => GetString("RazorProject_PathMustStartWithForwardSlash");
        }

        /// <summary>
        /// Path must begin with a forward slash '/'.
        /// </summary>
        internal static string FormatRazorProject_PathMustStartWithForwardSlash()
            => GetString("RazorProject_PathMustStartWithForwardSlash");

        /// <summary>
        /// A non-optional directive token cannot follow an optional directive token.
        /// </summary>
        internal static string DirectiveDescriptor_InvalidNonOptionalToken
        {
            get => GetString("DirectiveDescriptor_InvalidNonOptionalToken");
        }

        /// <summary>
        /// A non-optional directive token cannot follow an optional directive token.
        /// </summary>
        internal static string FormatDirectiveDescriptor_InvalidNonOptionalToken()
            => GetString("DirectiveDescriptor_InvalidNonOptionalToken");

        /// <summary>
        /// The document of kind '{0}' does not have a '{1}'. The document classifier must set a value for '{2}'.
        /// </summary>
        internal static string DocumentMissingTarget
        {
            get => GetString("DocumentMissingTarget");
        }

        /// <summary>
        /// The document of kind '{0}' does not have a '{1}'. The document classifier must set a value for '{2}'.
        /// </summary>
        internal static string FormatDocumentMissingTarget(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("DocumentMissingTarget"), p0, p1, p2);

        /// <summary>
        /// The item '{0}' could not be found.
        /// </summary>
        internal static string RazorTemplateEngine_ItemCouldNotBeFound
        {
            get => GetString("RazorTemplateEngine_ItemCouldNotBeFound");
        }

        /// <summary>
        /// The item '{0}' could not be found.
        /// </summary>
        internal static string FormatRazorTemplateEngine_ItemCouldNotBeFound(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("RazorTemplateEngine_ItemCouldNotBeFound"), p0);

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with name '{2}' because the name contains a '{3}' character.
        /// </summary>
        internal static string InvalidBoundAttributeName
        {
            get => GetString("InvalidBoundAttributeName");
        }

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with name '{2}' because the name contains a '{3}' character.
        /// </summary>
        internal static string FormatInvalidBoundAttributeName(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidBoundAttributeName"), p0, p1, p2, p3);

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with name '{2}' because the name starts with '{3}'.
        /// </summary>
        internal static string InvalidBoundAttributeNameStartsWith
        {
            get => GetString("InvalidBoundAttributeNameStartsWith");
        }

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with name '{2}' because the name starts with '{3}'.
        /// </summary>
        internal static string FormatInvalidBoundAttributeNameStartsWith(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidBoundAttributeNameStartsWith"), p0, p1, p2, p3);

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with a null or empty name.
        /// </summary>
        internal static string InvalidBoundAttributeNullOrWhitespace
        {
            get => GetString("InvalidBoundAttributeNullOrWhitespace");
        }

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with a null or empty name.
        /// </summary>
        internal static string FormatInvalidBoundAttributeNullOrWhitespace(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidBoundAttributeNullOrWhitespace"), p0, p1);

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with prefix '{2}' because the prefix contains a '{3}' character.
        /// </summary>
        internal static string InvalidBoundAttributePrefix
        {
            get => GetString("InvalidBoundAttributePrefix");
        }

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with prefix '{2}' because the prefix contains a '{3}' character.
        /// </summary>
        internal static string FormatInvalidBoundAttributePrefix(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidBoundAttributePrefix"), p0, p1, p2, p3);

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with prefix '{2}' because the prefix starts with '{3}'.
        /// </summary>
        internal static string InvalidBoundAttributePrefixStartsWith
        {
            get => GetString("InvalidBoundAttributePrefixStartsWith");
        }

        /// <summary>
        /// Invalid tag helper bound property '{0}.{1}'. Tag helpers cannot bind to HTML attributes with prefix '{2}' because the prefix starts with '{3}'.
        /// </summary>
        internal static string FormatInvalidBoundAttributePrefixStartsWith(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidBoundAttributePrefixStartsWith"), p0, p1, p2, p3);

        /// <summary>
        /// Invalid restricted child '{0}' for tag helper '{1}'. Tag helpers cannot restrict child elements that contain a '{2}' character.
        /// </summary>
        internal static string InvalidRestrictedChild
        {
            get => GetString("InvalidRestrictedChild");
        }

        /// <summary>
        /// Invalid restricted child '{0}' for tag helper '{1}'. Tag helpers cannot restrict child elements that contain a '{2}' character.
        /// </summary>
        internal static string FormatInvalidRestrictedChild(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidRestrictedChild"), p0, p1, p2);

        /// <summary>
        /// Invalid restricted child for tag helper '{0}'. Name cannot be null or whitespace.
        /// </summary>
        internal static string InvalidRestrictedChildNullOrWhitespace
        {
            get => GetString("InvalidRestrictedChildNullOrWhitespace");
        }

        /// <summary>
        /// Invalid restricted child for tag helper '{0}'. Name cannot be null or whitespace.
        /// </summary>
        internal static string FormatInvalidRestrictedChildNullOrWhitespace(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidRestrictedChildNullOrWhitespace"), p0);

        /// <summary>
        /// Tag helpers cannot target attribute name '{0}' because it contains a '{1}' character.
        /// </summary>
        internal static string InvalidTargetedAttributeName
        {
            get => GetString("InvalidTargetedAttributeName");
        }

        /// <summary>
        /// Tag helpers cannot target attribute name '{0}' because it contains a '{1}' character.
        /// </summary>
        internal static string FormatInvalidTargetedAttributeName(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidTargetedAttributeName"), p0, p1);

        /// <summary>
        /// Targeted attribute name cannot be null or whitespace.
        /// </summary>
        internal static string InvalidTargetedAttributeNameNullOrWhitespace
        {
            get => GetString("InvalidTargetedAttributeNameNullOrWhitespace");
        }

        /// <summary>
        /// Targeted attribute name cannot be null or whitespace.
        /// </summary>
        internal static string FormatInvalidTargetedAttributeNameNullOrWhitespace()
            => GetString("InvalidTargetedAttributeNameNullOrWhitespace");

        /// <summary>
        /// Tag helpers cannot target parent tag name '{0}' because it contains a '{1}' character.
        /// </summary>
        internal static string InvalidTargetedParentTagName
        {
            get => GetString("InvalidTargetedParentTagName");
        }

        /// <summary>
        /// Tag helpers cannot target parent tag name '{0}' because it contains a '{1}' character.
        /// </summary>
        internal static string FormatInvalidTargetedParentTagName(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidTargetedParentTagName"), p0, p1);

        /// <summary>
        /// Targeted parent tag name cannot be null or whitespace.
        /// </summary>
        internal static string InvalidTargetedParentTagNameNullOrWhitespace
        {
            get => GetString("InvalidTargetedParentTagNameNullOrWhitespace");
        }

        /// <summary>
        /// Targeted parent tag name cannot be null or whitespace.
        /// </summary>
        internal static string FormatInvalidTargetedParentTagNameNullOrWhitespace()
            => GetString("InvalidTargetedParentTagNameNullOrWhitespace");

        /// <summary>
        /// Tag helpers cannot target tag name '{0}' because it contains a '{1}' character.
        /// </summary>
        internal static string InvalidTargetedTagName
        {
            get => GetString("InvalidTargetedTagName");
        }

        /// <summary>
        /// Tag helpers cannot target tag name '{0}' because it contains a '{1}' character.
        /// </summary>
        internal static string FormatInvalidTargetedTagName(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidTargetedTagName"), p0, p1);

        /// <summary>
        /// Targeted tag name cannot be null or whitespace.
        /// </summary>
        internal static string InvalidTargetedTagNameNullOrWhitespace
        {
            get => GetString("InvalidTargetedTagNameNullOrWhitespace");
        }

        /// <summary>
        /// Targeted tag name cannot be null or whitespace.
        /// </summary>
        internal static string FormatInvalidTargetedTagNameNullOrWhitespace()
            => GetString("InvalidTargetedTagNameNullOrWhitespace");

        /// <summary>
        /// The node '{0}' is not the owner of change '{1}'.
        /// </summary>
        internal static string InvalidOperation_SpanIsNotChangeOwner
        {
            get => GetString("InvalidOperation_SpanIsNotChangeOwner");
        }

        /// <summary>
        /// The node '{0}' is not the owner of change '{1}'.
        /// </summary>
        internal static string FormatInvalidOperation_SpanIsNotChangeOwner(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidOperation_SpanIsNotChangeOwner"), p0, p1);

        /// <summary>
        /// Invalid directive keyword '{0}'. Directives must have a non-empty keyword that consists only of letters.
        /// </summary>
        internal static string DirectiveDescriptor_InvalidDirectiveKeyword
        {
            get => GetString("DirectiveDescriptor_InvalidDirectiveKeyword");
        }

        /// <summary>
        /// Invalid directive keyword '{0}'. Directives must have a non-empty keyword that consists only of letters.
        /// </summary>
        internal static string FormatDirectiveDescriptor_InvalidDirectiveKeyword(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("DirectiveDescriptor_InvalidDirectiveKeyword"), p0);

        /// <summary>
        /// The feature must be initialized by setting the '{0}' property.
        /// </summary>
        internal static string FeatureMustBeInitialized
        {
            get => GetString("FeatureMustBeInitialized");
        }

        /// <summary>
        /// The feature must be initialized by setting the '{0}' property.
        /// </summary>
        internal static string FormatFeatureMustBeInitialized(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("FeatureMustBeInitialized"), p0);

        /// <summary>
        /// The document type '{0}' does not support the extension '{1}'.
        /// </summary>
        internal static string Diagnostic_CodeTarget_UnsupportedExtension
        {
            get => GetString("Diagnostic_CodeTarget_UnsupportedExtension");
        }

        /// <summary>
        /// The document type '{0}' does not support the extension '{1}'.
        /// </summary>
        internal static string FormatDiagnostic_CodeTarget_UnsupportedExtension(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("Diagnostic_CodeTarget_UnsupportedExtension"), p0, p1);

        /// <summary>
        /// The '{0}` directive must appear at the start of the line.
        /// </summary>
        internal static string DirectiveMustAppearAtStartOfLine
        {
            get => GetString("DirectiveMustAppearAtStartOfLine");
        }

        /// <summary>
        /// The '{0}` directive must appear at the start of the line.
        /// </summary>
        internal static string FormatDirectiveMustAppearAtStartOfLine(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("DirectiveMustAppearAtStartOfLine"), p0);

        /// <summary>
        /// The '{0}' directives value(s) must be separated by whitespace.
        /// </summary>
        internal static string DirectiveTokensMustBeSeparatedByWhitespace
        {
            get => GetString("DirectiveTokensMustBeSeparatedByWhitespace");
        }

        /// <summary>
        /// The '{0}' directives value(s) must be separated by whitespace.
        /// </summary>
        internal static string FormatDirectiveTokensMustBeSeparatedByWhitespace(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("DirectiveTokensMustBeSeparatedByWhitespace"), p0);

        /// <summary>
        /// The key must not be null.
        /// </summary>
        internal static string KeyMustNotBeNull
        {
            get => GetString("KeyMustNotBeNull");
        }

        /// <summary>
        /// The key must not be null.
        /// </summary>
        internal static string FormatKeyMustNotBeNull()
            => GetString("KeyMustNotBeNull");

        /// <summary>
        /// The reference is invalid. The node '{0}' could not be found as a child of '{1}'.
        /// </summary>
        internal static string IRNodeReference_NodeNotFound
        {
            get => GetString("IRNodeReference_NodeNotFound");
        }

        /// <summary>
        /// The reference is invalid. The node '{0}' could not be found as a child of '{1}'.
        /// </summary>
        internal static string FormatIRNodeReference_NodeNotFound(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("IRNodeReference_NodeNotFound"), p0, p1);

        /// <summary>
        /// The reference is invalid. References initialized with the default constructor cannot modify nodes.
        /// </summary>
        internal static string IRNodeReference_NotInitialized
        {
            get => GetString("IRNodeReference_NotInitialized");
        }

        /// <summary>
        /// The reference is invalid. References initialized with the default constructor cannot modify nodes.
        /// </summary>
        internal static string FormatIRNodeReference_NotInitialized()
            => GetString("IRNodeReference_NotInitialized");

        /// <summary>
        /// The node '{0}' has a read-only child collection and cannot be modified.
        /// </summary>
        internal static string IRNodeReference_CollectionIsReadOnly
        {
            get => GetString("IRNodeReference_CollectionIsReadOnly");
        }

        /// <summary>
        /// The node '{0}' has a read-only child collection and cannot be modified.
        /// </summary>
        internal static string FormatIRNodeReference_CollectionIsReadOnly(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("IRNodeReference_CollectionIsReadOnly"), p0);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}

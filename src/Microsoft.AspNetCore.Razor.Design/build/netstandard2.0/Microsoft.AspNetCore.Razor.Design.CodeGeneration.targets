<Project>
  <!--
    Targets used for Razor SDK code generation. Support for the RazorCoreGenerate target.
    This target is explicitly imported by Razor SDK.
  -->

  <!-- 
    Consider these properties to be private to this targets file. The main Razor SDK should define all of the properties
    that we use to pass data back and forth. 
  -->
  <PropertyGroup>
    <!-- Used for tag helper discovery -->
    <_RazorTagHelperInputCache>$(IntermediateOutputPath)$(TargetName).TagHelpers.input.cache</_RazorTagHelperInputCache>
    <_RazorTagHelperOutputCache>$(IntermediateOutputPath)$(TargetName).TagHelpers.output.cache</_RazorTagHelperOutputCache>
    
    <!-- Used to locate our tools -->
    <_RazorGenerateToolAssembly>$(_RazorMSBuildRoot)tools\Microsoft.AspNetCore.Razor.GenerateTool.dll</_RazorGenerateToolAssembly>
    <_RazorTagHelperToolAssembly>$(_RazorMSBuildRoot)tools\Microsoft.AspNetCore.Razor.TagHelperTool.dll</_RazorTagHelperToolAssembly>

    <!-- Used to hash file inputs for RazorGenerate -->
    <_RazorGenerateInputsHash></_RazorGenerateInputsHash>
    <_RazorGenerateInputsHashFile>$(IntermediateOutputPath)$(MSBuildProjectName).RazorCoreGenerate.cache</_RazorGenerateInputsHashFile>
  </PropertyGroup>

  <!--
    This target will only be called when we have some .cshtml files that are going to participate in code generation.

    This is part of the chain of targets that are called once we've actually committed to generating code.
  -->
  <Target 
    Name="_HashRazorGenerateInputs" 
    Condition="'@(RazorGenerate)'!=''">

    <Hash ItemsToHash="@(RazorGenerate)">
      <Output TaskParameter="HashResult" PropertyName="_RazorGenerateInputsHash" />
    </Hash>

    <MakeDir
      Directories="$(IntermediateOutputPath)"
      Condition="!Exists('$(IntermediateOutputPath)')" />

    <WriteLinesToFile
      Lines="$(_RazorGenerateInputsHash)"
      File="$(_RazorGenerateInputsHashFile)"
      Overwrite="True"
      WriteOnlyWhenDifferent="True" />

    <ItemGroup>
      <FileWrites Include="$(_RazorGenerateInputsHashFile)" />
    </ItemGroup>
  </Target>

  <Target
    Name="ResolveTagHelperRazorGenerateInputs"
    DependsOnTargets="Compile"
    Inputs="$(MSBuildAllProjects);@(RazorReferencePath)"
    Outputs="$(_RazorTagHelperInputCache)"
    Condition="'@(RazorGenerate)'!=''">

    <!-- 
      We're manipulating our output directly here because we want to separate the actual up-to-date check
      of RazorCoreGenerate from the output of this target. Many times the set of tag helpers doesn't change
      so we don't need to regenerate the code.
      -->
    <Touch
      Files="$(_RazorTagHelperInputCache)"
      AlwaysCreate="true">
      <Output
        TaskParameter="TouchedFiles"
        ItemName="FileWrites" />
    </Touch>

    <RazorTagHelper
      Debug="$(_RazorDebugTagHelperTask)"
      DebugTool="$(_RazorDebugTagHelperTool)"
      ToolAssembly="$(_RazorTagHelperToolAssembly)"
      ServerAssembly="$(_RazorBuildServerAssembly)"
      Assemblies="@(RazorReferencePath)"
      TagHelperManifest="$(_RazorTagHelperOutputCache)">
      <Output
        TaskParameter="TagHelperManifest"
        ItemName="FileWrites"/>
    </RazorTagHelper>
  </Target>

  <Target Name="_ResolveRazorGenerateOutputs">
    <ItemGroup>
      <_RazorGenerateOutput Include="%(RazorGenerate.GeneratedOutput)" Condition="'%(RazorGenerate.GeneratedOutput)'!=''"/>    
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <RazorCoreGenerateDependsOn>
      _HashRazorGenerateInputs;
      _ResolveRazorGenerateOutputs;
    </RazorCoreGenerateDependsOn>
  </PropertyGroup>

  <Target
    Name="RazorCoreGenerate"
    DependsOnTargets="$(RazorCoreGenerateDependsOn)"
    Inputs="$(MSBuildAllProjects);$(_RazorGenerateInputsHashFile);$(_RazorTagHelperOutputCache);@(RazorGenerate)"
    Outputs="@(_RazorGenerateOutput)"
    Condition="'@(RazorGenerate)'!= ''">

    <RemoveDir
      Directories="$(RazorGenerateIntermediateOutputPath)"
      Condition = "Exists('$(RazorGenerateIntermediateOutputPath)')"/>

    <MakeDir
      Directories="%(_RazorGenerateOutput.RelativeDir)"
      Condition="!Exists('%(_RazorGenerateOutput.RelativeDir)')" />

    <RazorGenerate
      Debug="$(_RazorDebugGenerateCodeTask)"
      DebugTool="$(_RazorDebugGenerateCodeTool)"
      ToolAssembly="$(_RazorGenerateToolAssembly)"
      Sources="@(RazorGenerate)"
      ProjectRoot="$(MSBuildProjectDirectory)"
      TagHelperManifest="$(_RazorTagHelperOutputCache)"
      OutputPath="$(RazorGenerateIntermediateOutputPath)" />

    <ItemGroup>
      <FileWrites Include="@(_RazorGenerateOutput)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <ResolveRazorCompileInputsDependsOn>$(ResolveRazorCompileInputsDependsOn);_ResolveGeneratedRazorCompileInputs</ResolveRazorCompileInputsDependsOn>
  </PropertyGroup>

  <Target Name="_ResolveGeneratedRazorCompileInputs">
    <ItemGroup>
      <RazorCompile Include="@(_RazorGenerateOutput)" />
      <RazorEmbeddedResource Include="@(RazorGenerate)" Condition="$(EmbedRazorGenerateSources)">
        <LogicalName>/$([System.String]::Copy('%(Identity)').Replace('\','/'))</LogicalName>
        <Type>Non-Resx</Type>
        <WithCulture>false</WithCulture>
      </RazorEmbeddedResource>
    </ItemGroup>

    <!-- Similar to _GenerateCompileInputs -->
    <ItemGroup>
      <_RazorCoreCompileResourceInputs 
        Include="@(RazorEmbeddedResource)" 
        Condition="'%(RazorEmbeddedResource.WithCulture)'=='false' and '%(RazorEmbeddedResource.Type)'=='Non-Resx' " />
    </ItemGroup>
  </Target>

</Project>

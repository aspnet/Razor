<Project>
  <!-- 
    Targets supporting Razor MSBuild integration
  -->
  <Import Project="Microsoft.AspNetCore.Razor.Design.Compilation.targets" />

  <Target Name="RazorGenerate" DependsOnTargets="$(RazorGenerateDependsOn)">
  </Target>

  <Target Name="RazorCompile" DependsOnTargets="$(RazorCompileDependsOn)">
  </Target>

  <PropertyGroup Condition="'$(RazorCompileOnBuild)'=='true'">
    <PrepareForRunDependsOn>RazorCompile;$(PrepareForRunDependsOn);_RazorCopyFilesToOutputDirectory</PrepareForRunDependsOn>
    <GetCopyToOutputDirectoryItemsDependsOn>$(GetCopyToOutputDirectoryItemsDependsOn);_RazorGetCopyToOutputDirectoryItems</GetCopyToOutputDirectoryItemsDependsOn>
  </PropertyGroup>

  <!-- 
    Default values for properties that affect Razor MSBuild behavior. 
  -->
  <PropertyGroup>
    <!-- Output directory used for generated files -->
    <RazorGenerateOutputPath Condition="'$(RazorGenerateOutputPath)'==''">$(IntermediateOutputPath)Razor\</RazorGenerateOutputPath>
    
    <!-- File name (without extension) of the assembly produced by Razor -->
    <RazorTargetName Condition="'$(RazorTargetName)'==''">$(TargetName).PrecompiledViews</RazorTargetName>
  </PropertyGroup>

  <ItemGroup>
    <!-- Used to creating the final compiled Razor dll -->
    <RazorIntermediateAssembly Include="$(IntermediateOutputPath)$(RazorTargetName).dll" />
  </ItemGroup>

  <!-- Implementation details here... -->
  <PropertyGroup>
    <!-- Used for tag helper discovery -->
    <_RazorTagHelperInputCache>$(IntermediateOutputPath)$(TargetName).TagHelpers.input.cache</_RazorTagHelperInputCache>
    <_RazorTagHelperOutputCache>$(IntermediateOutputPath)$(TargetName).TagHelpers.output.cache</_RazorTagHelperOutputCache>
    
    <!-- Used to locate our tools -->
    <_RazorGenerateToolAssembly>$(_RazorMSBuildRoot)tools\Microsoft.AspNetCore.Razor.GenerateTool.dll</_RazorGenerateToolAssembly>
    <_RazorTagHelperToolAssembly>$(_RazorMSBuildRoot)tools\Microsoft.AspNetCore.Razor.TagHelperTool.dll</_RazorTagHelperToolAssembly>

    <!-- Similar to https://github.com/Microsoft/msbuild/blob/908cc9ccd4961441628f68e37a148183a87bb067/src/Tasks/Microsoft.Common.CurrentVersion.targets#L146-L153 -->
    <_RazorDebugSymbolsProduced>false</_RazorDebugSymbolsProduced>
    <_RazorDebugSymbolsProduced Condition="'$(DebugSymbols)'=='true'">true</_RazorDebugSymbolsProduced>
    <_RazorDebugSymbolsProduced Condition="'$(DebugType)'=='none'">false</_RazorDebugSymbolsProduced>
    <_RazorDebugSymbolsProduced Condition="'$(DebugType)'=='pdbonly'">true</_RazorDebugSymbolsProduced>
    <_RazorDebugSymbolsProduced Condition="'$(DebugType)'=='full'">true</_RazorDebugSymbolsProduced>
    <_RazorDebugSymbolsProduced Condition="'$(DebugType)'=='portable'">true</_RazorDebugSymbolsProduced>
    <_RazorDebugSymbolsProduced Condition="'$(DebugType)'=='embedded'">false</_RazorDebugSymbolsProduced>
  </PropertyGroup>

  <ItemGroup>
    <!-- These are also referenced in .Compilation.targets - don't just casually change these -->
    <_RazorDebugSymbolsIntermediatePath Condition="'$(_RazorDebugSymbolsProduced)'=='true'" Include="$(IntermediateOutputPath)$(RazorTargetName).pdb" />
    <_RazorDebugSymbolsOutputPath Include="@(_RazorDebugSymbolsIntermediatePath->'$(OutDir)%(Filename)%(Extension)')" />
  </ItemGroup>

  <!--
    Gathers input source files for code generation. This is a separate target so that we can avoid
    lots of work when there are no inputs for code generation.

    Notice there are plenty of Condition="'@(RazorGenerate)'!=''" to avoid running more expensive targets.
  -->
  <Target Name="RazorResolveGenerateInputs">
    <ItemGroup>
      <RazorGenerate Include="@(Content)" Condition="'%(Content.Extension)'=='.cshtml'" />
      <_RazorGenerateOutput Include="@(RazorGenerate->'$(RazorGenerateOutputPath)%(RelativeDir)%(Filename).cs')" />
    </ItemGroup>
  </Target>

  <!--
    This target will only be called when we have some .cshtml files that are going to participate in code generation.

    This is part of the chain of targets that are called once we've actually committed to generating code.
  -->
  <Target 
    Name="_ResolveRazorCoreGenerateInputs" 
    DependsOnTargets="RazorResolveGenerateInputs"
    Condition="'@(RazorGenerate)'!=''">

    <PropertyGroup>
      <_RazorGenerateHashFile>$(IntermediateOutputPath)$(MSBuildProjectName).RazorCoreGenerate.cache</_RazorGenerateHashFile>
    </PropertyGroup>

    <Hash ItemsToHash="@(RazorGenerate)" Condition="'@(RazorGenerate)'!=''">
      <Output TaskParameter="HashResult" PropertyName="_RazorGenerateHash" />
    </Hash>

    <MakeDir
      Directories="$(IntermediateOutputPath)"
      Condition="!Exists('$(IntermediateOutputPath)')" />

    <WriteLinesToFile
      Lines="$(_RazorGenerateHash)"
      File="$(_RazorGenerateHashFile)"
      Overwrite="True"
      WriteOnlyWhenDifferent="True" />

    <ItemGroup>
      <FileWrites Include="$(_RazorGenerateHashFile)" />
    </ItemGroup>
  </Target>

  <!-- 
    Gathers input assemblies for Tag Helper discovery and compilation. Add items to @(ReferencePath)
  -->
  <Target
    Name="_RazorResolveReferences"
    DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <RazorReferencePath Include="@(ReferencePath)"/>
      <RazorReferencePath Include="$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)$(TargetName)$(TargetExt)'))"/>
    </ItemGroup>
  </Target>

  <Target
    Name="_RazorResolveTagHelpers"
    DependsOnTargets="Compile;_RazorResolveReferences"
    Inputs="$(MSBuildAllProjects);@(RazorReferencePath)"
    Outputs="$(_RazorTagHelperInputCache)"
    Condition="'@(RazorGenerate)'!=''">

    <!-- 
      We're manipulating our output directly here because we want to separate the actual up-to-date check
      of RazorCoreGenerate from the output of this target. Many times the set of tag helpers doesn't change
      so we don't need to regenerate the code.
      -->
    <Touch
      Files="$(_RazorTagHelperInputCache)"
      AlwaysCreate="true">
      <Output
        TaskParameter="TouchedFiles"
        ItemName="FileWrites" />
    </Touch>

    <RazorTagHelper
      Debug="$(_RazorDebugTagHelperTask)"
      DebugTool="$(_RazorDebugTagHelperTool)"
      ToolAssembly="$(_RazorTagHelperToolAssembly)"
      Assemblies="@(RazorReferencePath)"
      TagHelperManifest="$(_RazorTagHelperOutputCache)">
      <Output
        TaskParameter="TagHelperManifest"
        ItemName="FileWrites"/>
    </RazorTagHelper>

  </Target>

  <Target
    Name="RazorCoreGenerate"
    DependsOnTargets="_ResolveRazorCoreGenerateInputs;_RazorResolveTagHelpers"
    Inputs="$(MSBuildAllProjects);$(_RazorGenerateHashFile);$(_RazorTagHelperOutputCache);@(RazorGenerate)"
    Outputs="@(_RazorGenerateOutput)"
    Condition="'@(RazorGenerate)'!= ''">

    <RemoveDir
      Directories="$(RazorGenerateOutputPath)"
      Condition = "Exists('$(RazorGenerateOutputPath)')"/>

    <MakeDir
      Directories="%(_RazorGenerateOutput.RelativeDir)"
      Condition="!Exists('%(_RazorGenerateOutput.RelativeDir)')" />

    <RazorGenerate
      Debug="$(_RazorDebugGenerateCodeTask)"
      DebugTool="$(_RazorDebugGenerateCodeTool)"
      ToolAssembly="$(_RazorGenerateToolAssembly)"
      Sources="@(RazorGenerate)"
      ProjectRoot="$(MSBuildProjectDirectory)"
      TagHelperManifest="$(_RazorTagHelperOutputCache)"
      OutputPath="$(RazorGenerateOutputPath)" />

    <ItemGroup>
      <FileWrites Include="@(_RazorGenerateOutput)" />

      <!-- These items are used by RazorCoreCompile -->
      <RazorCompile Include="@(_RazorGenerateOutput)" />
    </ItemGroup>
  </Target>

  <!-- 
    This target is called after PrepareForPublish when RazorCompileOnBuild=true so that we can hook into publish.
    This target just hooks up other targets since Publish and PrepareForPublish don't have a DependsOnTargets
    property we can use. 
  -->
  <Target 
    Name="_RazorPrepareForPublish"
    AfterTargets="PrepareForPublish"
    DependsOnTargets="RazorCompile">
  </Target>

  <!--
    This target adds the Razor assembly to the BuiltProjectOutputGroupOutput - which is used as input to the Pack target.
  -->
  <Target 
    Name="_RazorAddBuiltProjectOutputGroupOutput"
    DependsOnTargets="RazorResolveGenerateInputs"
    BeforeTargets="BuiltProjectOutputGroup">

    <ItemGroup Condition="'@(RazorGenerate)'!= '' and '$(RazorCompileOnBuild)' == 'true'">
      <BuiltProjectOutputGroupOutput Include="@(RazorIntermediateAssembly)" FinalOutputPath="$(Outdir)$(RazorTargetName).dll" />
    </ItemGroup>
    
  </Target>

  <!--
    Called as part of GetCopyToOutputDirectoryItems - this target populates the list of items that get
    copied to the output directory when building as a project reference.
  -->
  <Target 
    Name="_RazorGetCopyToOutputDirectoryItems"
    DependsOnTargets="RazorCompile"
    Condition="'$(RazorCompileOnBuild)'=='true'">

    <!-- 
      This condition needs to be inside the target because it the itemgroup will be populated after the target's
      condition is evaluated.
    -->
    <ItemGroup Condition="'@(RazorGenerate)'!=''">
      <AllItemsFullPathWithTargetPath Include="@(RazorIntermediateAssembly->'%(FullPath)')">
        <TargetPath>%(Filename)%(Extension)</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllItemsFullPathWithTargetPath>
      <AllItemsFullPathWithTargetPath Include="@(_RazorDebugSymbolsIntermediatePath->'%(FullPath)')">
        <TargetPath>%(Filename)%(Extension)</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllItemsFullPathWithTargetPath>
    </ItemGroup>

  </Target>

  <!--
    Called as part of GetCopyToPublishDirectoryItems - this target populates the list of items that get
    copied to the publish directory when publishing as a project reference.

    The dependency on RazorCompile is needed because this will be called during publish on each P2P
    reference without calling RazorCompile for the P2P references.
  -->
  <Target
    Name="_RazorGetCopyToPublishDirectoryItems"
    BeforeTargets="GetCopyToPublishDirectoryItems"
    DependsOnTargets="RazorCompile"
    Condition="'$(RazorCompileOnBuild)'=='true' or '$(RazorCompileOnPublish)'=='true'">

    <!-- 
      This condition needs to be inside the target because it the itemgroup will be populated after the target's
      condition is evaluated.
    -->
    <ItemGroup Condition="'@(RazorGenerate)'!=''">
      <AllPublishItemsFullPathWithTargetPath Include="@(RazorIntermediateAssembly->'%(FullPath)')">
        <TargetPath>%(Filename)%(Extension)</TargetPath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </AllPublishItemsFullPathWithTargetPath>
      <AllPublishItemsFullPathWithTargetPath Include="@(_RazorDebugSymbolsIntermediatePath->'%(FullPath)')">
        <TargetPath>%(Filename)%(Extension)</TargetPath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </AllPublishItemsFullPathWithTargetPath>
    </ItemGroup>

  </Target>

  <!--
    Called as part of CopyFilesToOutputDirectory - this target is called when building the project to copy
    files to the output directory.
  -->
  <Target Name="_RazorCopyFilesToOutputDirectory">

    <!-- Copy the Razor dll  -->
    <Copy
      SourceFiles="@(RazorIntermediateAssembly)"
      DestinationFolder="$(OutDir)"
      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
      UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
      Condition="Exists('@(RazorIntermediateAssembly)') and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">

      <Output TaskParameter="DestinationFiles" ItemName="_RazorAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <Message 
      Importance="High" 
      Text="$(MSBuildProjectName) -&gt; @(_RazorAssembly->'%(FullPath)')" 
      Condition="Exists('@(RazorIntermediateAssembly)') and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)'!='true'" />

    <!-- Copy the Razor debug information file (.pdb), if any -->
    <Copy
      SourceFiles="@(_RazorDebugSymbolsIntermediatePath)"
      DestinationFiles="@(_RazorDebugSymbolsOutputPath)"
      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
      UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
      Condition="Exists('@(_RazorDebugSymbolsIntermediatePath)') and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
    
  </Target>

  <!--
    Called after ComputeFilesToPublish - this target is called when publishing the project to get a list of
    files to the output directory.
  -->
  <Target
    Name="_RazorComputeFilesToPublish"
    AfterTargets="ComputeFilesToPublish">

    <ItemGroup Condition="'@(RazorGenerate)'!='' and ('$(RazorCompileOnBuild)'=='true' or '$(RazorCompileOnPublish)'=='true')">
      <ResolvedFileToPublish Include="@(RazorIntermediateAssembly)" Condition="'$(CopyBuildOutputToPublishDirectory)'=='true'">
        <RelativePath>@(RazorIntermediateAssembly->'%(Filename)%(Extension)')</RelativePath>
      </ResolvedFileToPublish>
      <ResolvedFileToPublish Include="@(_RazorDebugSymbolsIntermediatePath)" Condition="'$(CopyOutputSymbolsToPublishDirectory)'=='true'">
        <RelativePath>@(_RazorDebugSymbolsIntermediatePath->'%(Filename)%(Extension)')</RelativePath>
      </ResolvedFileToPublish>
    </ItemGroup>

  </Target>

</Project>

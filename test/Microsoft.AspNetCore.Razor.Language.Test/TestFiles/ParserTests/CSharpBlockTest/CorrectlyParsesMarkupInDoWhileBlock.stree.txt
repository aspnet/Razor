Statement block - Gen<None> - 58 - (0:0,0)
    Transition span - Gen<None> - [@] - SpanEditHandler;Accepts:None - (0:0,0) - Tokens:1
        SyntaxKind.Transition;[@];
    Code span - Gen<Stmt> - [do { var foo = bar;] - SpanEditHandler;Accepts:Any - (1:0,1) - Tokens:12
        SyntaxKind.Keyword;[do];
        SyntaxKind.Whitespace;[ ];
        SyntaxKind.LeftBrace;[{];
        SyntaxKind.Whitespace;[ ];
        SyntaxKind.Identifier;[var];
        SyntaxKind.Whitespace;[ ];
        SyntaxKind.Identifier;[foo];
        SyntaxKind.Whitespace;[ ];
        SyntaxKind.Assign;[=];
        SyntaxKind.Whitespace;[ ];
        SyntaxKind.Identifier;[bar];
        SyntaxKind.Semicolon;[;];
    Markup block - Gen<None> - 12 - (20:0,20)
        Markup span - Gen<Markup> - [ ] - SpanEditHandler;Accepts:Any - (20:0,20) - Tokens:1
            SyntaxKind.Whitespace;[ ];
        Tag block - Gen<None> - 3 - (21:0,21)
            Markup span - Gen<Markup> - [<p>] - SpanEditHandler;Accepts:None - (21:0,21) - Tokens:3
                SyntaxKind.OpenAngle;[<];
                SyntaxKind.HtmlTextLiteral;[p];
                SyntaxKind.CloseAngle;[>];
        Markup span - Gen<Markup> - [Foo] - SpanEditHandler;Accepts:Any - (24:0,24) - Tokens:1
            SyntaxKind.HtmlTextLiteral;[Foo];
        Tag block - Gen<None> - 4 - (27:0,27)
            Markup span - Gen<Markup> - [</p>] - SpanEditHandler;Accepts:None - (27:0,27) - Tokens:4
                SyntaxKind.OpenAngle;[<];
                SyntaxKind.ForwardSlash;[/];
                SyntaxKind.HtmlTextLiteral;[p];
                SyntaxKind.CloseAngle;[>];
        Markup span - Gen<Markup> - [ ] - SpanEditHandler;Accepts:None - (31:0,31) - Tokens:1
            SyntaxKind.Whitespace;[ ];
    Code span - Gen<Stmt> - [foo++; } while (foo<bar>);] - SpanEditHandler;Accepts:None - (32:0,32) - Tokens:15
        SyntaxKind.Identifier;[foo];
        SyntaxKind.Increment;[++];
        SyntaxKind.Semicolon;[;];
        SyntaxKind.Whitespace;[ ];
        SyntaxKind.RightBrace;[}];
        SyntaxKind.Whitespace;[ ];
        SyntaxKind.Keyword;[while];
        SyntaxKind.Whitespace;[ ];
        SyntaxKind.LeftParenthesis;[(];
        SyntaxKind.Identifier;[foo];
        SyntaxKind.LessThan;[<];
        SyntaxKind.Identifier;[bar];
        SyntaxKind.GreaterThan;[>];
        SyntaxKind.RightParenthesis;[)];
        SyntaxKind.Semicolon;[;];
